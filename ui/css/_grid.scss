// Grid


@mixin breakpoint-media($breakpoint-name, $breakpoint-min-width) {
  @if $breakpoint-name != xs {
    @media(min-width: $breakpoint-min-width) {
      @content;
    }
  } @else {
    @content;
  }
}

.container-fluid {
  margin-left: auto;
  margin-right: auto;
}

.container {
  @extend .container-fluid;
  @each $breakpoint-name, $breakpoint-min-width in $breakpoint-min-widths {
    @include breakpoint-media($breakpoint-name, $breakpoint-min-width) {
      max-width: map-get($container-max-widths, $breakpoint-name);
    }
  }
}

.row {
  display: flex;
  flex-wrap: wrap;
  position: relative;
  @each $breakpoint-name, $breakpoint-min-width in $breakpoint-min-widths {
    @include breakpoint-media($breakpoint-name, $breakpoint-min-width) {
      &-#{$breakpoint-name}-top { align-items: flex-start; }
      &-#{$breakpoint-name}-center { align-items: center; }
      &-#{$breakpoint-name}-bottom { align-items: flex-end; }
    }
  }
}

.col {
  @each $breakpoint-name, $breakpoint-min-width in $breakpoint-min-widths {
    @include breakpoint-media($breakpoint-name, $breakpoint-min-width) {
      &-#{$breakpoint-name} {
        &-first { order: -1; }
        &-last { order: 1; }
        &-top { align-self: flex-start; }
        &-center { align-self: center; }
        &-bottom { align-self: flex-end; }
        @for $i from 0 through $grid-columns {
          $width: "calc(#{$i} / #{$grid-columns} * 100%)";
          @if $i != 0 {
            &-#{$i} {
              position: relative;
              min-height: 1px;
              flex: 0 0 #{$width};
            }
          }
          @if $i != $grid-columns {
            &-offset-#{$i} { margin-left: #{$width}; }
            &-pull-#{$i} { right: #{$width}; }
            &-push-#{$i} { left: #{$width}; }
          }
        }
      }
    }
  }
}
